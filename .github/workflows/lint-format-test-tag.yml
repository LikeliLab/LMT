name: Lint, Format, Test, Tag
permissions:
 contents: write
on:
  push:

jobs:
  get-python-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.python-version.outputs.version }}
      matrix: ${{ steps.python-version.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get Python version
        id: python-version
        uses: ./.github/actions/get-python-versions

  lint-format-test:
    needs: get-python-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python with Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ needs.get-python-version.outputs.version }}

      - name: Run linter and formatter
        run: poetry run pre-commit run --all-files

      - name: Unit Tests with pytest
        run: poetry run pytest -v --durations=0 --cov --cov-report=xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  tag-release:
    needs: lint-format-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python with Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ needs.get-python-version.outputs.version }}
          install-dependencies: 'false'

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(poetry version | cut -d' ' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "::error::Tag v${VERSION} already exists on GitHub. Please bump the version in pyproject.toml."
            exit 1
          fi

      - name: Create and push new tag
        if: success()
        run: |
          git tag -a "v${VERSION}" -m "Automated release version v${VERSION}"
          git push origin "v${VERSION}"

  publish:
    needs: [tag-release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build package
        shell: bash
        run: poetry build

      - name: Publish to PyPI and GitHub
        uses: ./.github/actions/publish-package
        with:
          python-version: ${{ needs.get-python-version.outputs.version }}
          environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}
          pypi-token: ${{ github.ref == 'refs/heads/main' && secrets.PYPI_API_TOKEN || secrets.TEST_PYPI_API_TOKEN }}
          release-type: ${{ github.ref == 'refs/heads/main' && 'release' || 'prerelease' }}
          release-name: Release v${{ needs.tag-release.outputs.version }}
          release-body: "Automated release for v${{ needs.tag-release.outputs.version }}"

